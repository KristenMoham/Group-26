{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8d5f87c3",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-11-27T02:34:41.554146Z",
     "iopub.status.busy": "2024-11-27T02:34:41.553690Z",
     "iopub.status.idle": "2024-11-27T02:35:26.414846Z",
     "shell.execute_reply": "2024-11-27T02:35:26.413609Z"
    },
    "papermill": {
     "duration": 44.868973,
     "end_time": "2024-11-27T02:35:26.417625",
     "exception": false,
     "start_time": "2024-11-27T02:34:41.548652",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "import kagglehub\n",
    "!pip install -q kaggle\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8675b5af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-27T02:35:26.425317Z",
     "iopub.status.busy": "2024-11-27T02:35:26.424770Z",
     "iopub.status.idle": "2024-11-27T02:35:26.583922Z",
     "shell.execute_reply": "2024-11-27T02:35:26.582404Z"
    },
    "papermill": {
     "duration": 0.165568,
     "end_time": "2024-11-27T02:35:26.586318",
     "exception": false,
     "start_time": "2024-11-27T02:35:26.420750",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/food-com-recipes-and-user-interactions\n"
     ]
    }
   ],
   "source": [
    "#\n",
    "food_com_recipes_and_user_interactions_path = kagglehub.dataset_download('shuyangli94/food-com-recipes-and-user-interactions')\n",
    "print(food_com_recipes_and_user_interactions_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5746bfda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-27T02:35:26.593159Z",
     "iopub.status.busy": "2024-11-27T02:35:26.592748Z",
     "iopub.status.idle": "2024-11-27T02:35:26.597638Z",
     "shell.execute_reply": "2024-11-27T02:35:26.596518Z"
    },
    "papermill": {
     "duration": 0.010841,
     "end_time": "2024-11-27T02:35:26.599923",
     "exception": false,
     "start_time": "2024-11-27T02:35:26.589082",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#\n",
    "file_path = '/kaggle/input/food-com-recipes-and-user-interactions/RAW_recipes.csv'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "54c00e24",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-27T02:35:26.606923Z",
     "iopub.status.busy": "2024-11-27T02:35:26.606481Z",
     "iopub.status.idle": "2024-11-27T02:35:34.958319Z",
     "shell.execute_reply": "2024-11-27T02:35:34.956956Z"
    },
    "papermill": {
     "duration": 8.358827,
     "end_time": "2024-11-27T02:35:34.961302",
     "exception": false,
     "start_time": "2024-11-27T02:35:26.602475",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#\n",
    "df = pd.read_csv(file_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "59a2a0ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-27T02:35:34.968117Z",
     "iopub.status.busy": "2024-11-27T02:35:34.967686Z",
     "iopub.status.idle": "2024-11-27T02:35:35.305907Z",
     "shell.execute_reply": "2024-11-27T02:35:35.304633Z"
    },
    "papermill": {
     "duration": 0.344353,
     "end_time": "2024-11-27T02:35:35.308407",
     "exception": false,
     "start_time": "2024-11-27T02:35:34.964054",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#\n",
    "mainIngredient = df[['name','ingredients','n_ingredients','n_steps','minutes']]\n",
    "mIng = mainIngredient.values.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4d740f9a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-27T02:35:35.316156Z",
     "iopub.status.busy": "2024-11-27T02:35:35.315630Z",
     "iopub.status.idle": "2024-11-27T02:35:45.810954Z",
     "shell.execute_reply": "2024-11-27T02:35:45.809696Z"
    },
    "papermill": {
     "duration": 10.502661,
     "end_time": "2024-11-27T02:35:45.813949",
     "exception": false,
     "start_time": "2024-11-27T02:35:35.311288",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Shell Sort\n",
    "n = len(mIng)\n",
    "gap = n//2\n",
    "while gap > 0:\n",
    "        for i in range(gap, n):\n",
    "            temp = mIng[i]\n",
    "            j = i            \n",
    "            temp_ingredient = temp[1][2:10]\n",
    "            prev = mIng[j - gap]\n",
    "            prev_ingredient = prev[1][2:10]\n",
    "            while(j >= gap and prev_ingredient > temp_ingredient):\n",
    "                prev = mIng[j - gap]\n",
    "                prev_ingredient = prev[1][2:10]\n",
    "                mIng[j] = prev\n",
    "                j -= gap\n",
    "            mIng[j] = temp\n",
    "            \n",
    "        if(gap == 2):\n",
    "            gap = 1\n",
    "        else:\n",
    "            gap //= 2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "693ee05c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-27T02:35:45.821045Z",
     "iopub.status.busy": "2024-11-27T02:35:45.820515Z",
     "iopub.status.idle": "2024-11-27T02:35:47.743756Z",
     "shell.execute_reply": "2024-11-27T02:35:47.742687Z"
    },
    "papermill": {
     "duration": 1.929182,
     "end_time": "2024-11-27T02:35:47.745952",
     "exception": false,
     "start_time": "2024-11-27T02:35:45.816770",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>easy low fat chicken souvlaki</td>\n",
       "      <td>['1% fat buttermilk', 'liquid honey', 'salt', ...</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>low fat buttermilk basil salad dressing</td>\n",
       "      <td>['1% fat buttermilk', 'low-fat sour cream', 'p...</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ranch style buttermilk dressing  light version</td>\n",
       "      <td>['1% fat buttermilk', 'reduced-fat mayonnaise'...</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>blueberry cheese danish</td>\n",
       "      <td>['1% fat cottage cheese', 'sugar', '1% low-fat...</td>\n",
       "      <td>15</td>\n",
       "      <td>20</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>creamy ranch dressing</td>\n",
       "      <td>['1% fat cottage cheese', 'parmesan cheese', '...</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                0  \\\n",
       "0                   easy low fat chicken souvlaki   \n",
       "1         low fat buttermilk basil salad dressing   \n",
       "2  ranch style buttermilk dressing  light version   \n",
       "3                         blueberry cheese danish   \n",
       "4                           creamy ranch dressing   \n",
       "\n",
       "                                                   1   2   3    4  \n",
       "0  ['1% fat buttermilk', 'liquid honey', 'salt', ...   8   3  490  \n",
       "1  ['1% fat buttermilk', 'low-fat sour cream', 'p...   6   3   65  \n",
       "2  ['1% fat buttermilk', 'reduced-fat mayonnaise'...  10   3   10  \n",
       "3  ['1% fat cottage cheese', 'sugar', '1% low-fat...  15  20   45  \n",
       "4  ['1% fat cottage cheese', 'parmesan cheese', '...  10   3   10  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#converting list to csv\n",
    "d = {'col1': mIng[0][0:], 'col2': mIng[1][1]}\n",
    "sIngDF = pd.DataFrame(data = mIng)\n",
    "sIngDF.to_csv('Sorted-Recipes.csv')\n",
    "sIngDF.head()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 683,
     "sourceId": 1293,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 311962,
     "sourceId": 783630,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 69.72369,
   "end_time": "2024-11-27T02:35:48.570995",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-11-27T02:34:38.847305",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
