{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ce3ed001",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-12-04T00:52:21.665806Z",
     "iopub.status.busy": "2024-12-04T00:52:21.664638Z",
     "iopub.status.idle": "2024-12-04T00:53:06.896210Z",
     "shell.execute_reply": "2024-12-04T00:53:06.894830Z"
    },
    "papermill": {
     "duration": 45.239845,
     "end_time": "2024-12-04T00:53:06.899696",
     "exception": false,
     "start_time": "2024-12-04T00:52:21.659851",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "import kagglehub\n",
    "!pip install -q kaggle\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5c2d38bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-04T00:53:06.907499Z",
     "iopub.status.busy": "2024-12-04T00:53:06.906973Z",
     "iopub.status.idle": "2024-12-04T00:53:07.387560Z",
     "shell.execute_reply": "2024-12-04T00:53:07.386425Z"
    },
    "papermill": {
     "duration": 0.487651,
     "end_time": "2024-12-04T00:53:07.390787",
     "exception": false,
     "start_time": "2024-12-04T00:53:06.903136",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/food-com-recipes-and-user-interactions\n"
     ]
    }
   ],
   "source": [
    "#\n",
    "food_com_recipes_and_user_interactions_path = kagglehub.dataset_download('shuyangli94/food-com-recipes-and-user-interactions')\n",
    "print(food_com_recipes_and_user_interactions_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "08a41a6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-04T00:53:07.397772Z",
     "iopub.status.busy": "2024-12-04T00:53:07.397364Z",
     "iopub.status.idle": "2024-12-04T00:53:07.402452Z",
     "shell.execute_reply": "2024-12-04T00:53:07.401421Z"
    },
    "papermill": {
     "duration": 0.01115,
     "end_time": "2024-12-04T00:53:07.404642",
     "exception": false,
     "start_time": "2024-12-04T00:53:07.393492",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#\n",
    "file_path = '/kaggle/input/food-com-recipes-and-user-interactions/RAW_recipes.csv'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a9935793",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-04T00:53:07.411245Z",
     "iopub.status.busy": "2024-12-04T00:53:07.410836Z",
     "iopub.status.idle": "2024-12-04T00:53:15.205712Z",
     "shell.execute_reply": "2024-12-04T00:53:15.204570Z"
    },
    "papermill": {
     "duration": 7.801295,
     "end_time": "2024-12-04T00:53:15.208550",
     "exception": false,
     "start_time": "2024-12-04T00:53:07.407255",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#\n",
    "df = pd.read_csv(file_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "200d7ef8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-04T00:53:15.215909Z",
     "iopub.status.busy": "2024-12-04T00:53:15.215478Z",
     "iopub.status.idle": "2024-12-04T00:53:15.569522Z",
     "shell.execute_reply": "2024-12-04T00:53:15.568289Z"
    },
    "papermill": {
     "duration": 0.360973,
     "end_time": "2024-12-04T00:53:15.572257",
     "exception": false,
     "start_time": "2024-12-04T00:53:15.211284",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#\n",
    "mainIngredient = df[['name','ingredients','n_ingredients','n_steps','minutes', 'id']]\n",
    "mIng = mainIngredient.values.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7fa594b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-04T00:53:15.579319Z",
     "iopub.status.busy": "2024-12-04T00:53:15.578918Z",
     "iopub.status.idle": "2024-12-04T00:53:26.092100Z",
     "shell.execute_reply": "2024-12-04T00:53:26.090372Z"
    },
    "papermill": {
     "duration": 10.519979,
     "end_time": "2024-12-04T00:53:26.094974",
     "exception": false,
     "start_time": "2024-12-04T00:53:15.574995",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Shell Sort\n",
    "n = len(mIng)\n",
    "gap = n//2\n",
    "while gap > 0:\n",
    "        for i in range(gap, n):\n",
    "            temp = mIng[i]\n",
    "            j = i            \n",
    "            temp_ingredient = temp[1][2:10]\n",
    "            prev = mIng[j - gap]\n",
    "            prev_ingredient = prev[1][2:10]\n",
    "            while(j >= gap and prev_ingredient > temp_ingredient):\n",
    "                prev = mIng[j - gap]\n",
    "                prev_ingredient = prev[1][2:10]\n",
    "                mIng[j] = prev\n",
    "                j -= gap\n",
    "            mIng[j] = temp\n",
    "            \n",
    "        if(gap == 2):\n",
    "            gap = 1\n",
    "        else:\n",
    "            gap //= 2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "68e3b7a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-04T00:53:26.102699Z",
     "iopub.status.busy": "2024-12-04T00:53:26.102329Z",
     "iopub.status.idle": "2024-12-04T00:53:28.274414Z",
     "shell.execute_reply": "2024-12-04T00:53:28.273228Z"
    },
    "papermill": {
     "duration": 2.178557,
     "end_time": "2024-12-04T00:53:28.276935",
     "exception": false,
     "start_time": "2024-12-04T00:53:26.098378",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#converting list to csv\n",
    "d = {'col1': mIng[0][0:], 'col2': mIng[1][1]}\n",
    "sIngDF = pd.DataFrame(data = mIng)\n",
    "sIngDF.to_csv('Sorted-Recipes.csv')\n",
    "#sIngDF.head()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 683,
     "sourceId": 1293,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 311962,
     "sourceId": 783630,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 70.544878,
   "end_time": "2024-12-04T00:53:29.202583",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-12-04T00:52:18.657705",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
